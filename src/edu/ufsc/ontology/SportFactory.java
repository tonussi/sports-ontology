package edu.ufsc.ontology;

import edu.ufsc.ontology.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: SportFactory<br>
 * @version generated on Sun May 07 17:49:55 BRT 2017 by senhorinha
 */
public class SportFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public SportFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public SportFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Asphalt
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Asphalt", Asphalt.class, DefaultAsphalt.class);
    }

    /**
     * Creates an instance of type Asphalt.  Modifies the underlying ontology.
     */
    public Asphalt createAsphalt(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ASPHALT, DefaultAsphalt.class);
    }

    /**
     * Gets an instance of type Asphalt with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Asphalt getAsphalt(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ASPHALT, DefaultAsphalt.class);
    }

    /**
     * Gets all instances of Asphalt from the ontology.
     */
    public Collection<? extends Asphalt> getAllAsphaltInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ASPHALT, DefaultAsphalt.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Ball
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Ball", Ball.class, DefaultBall.class);
    }

    /**
     * Creates an instance of type Ball.  Modifies the underlying ontology.
     */
    public Ball createBall(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BALL, DefaultBall.class);
    }

    /**
     * Gets an instance of type Ball with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Ball getBall(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BALL, DefaultBall.class);
    }

    /**
     * Gets all instances of Ball from the ontology.
     */
    public Collection<? extends Ball> getAllBallInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BALL, DefaultBall.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Bicycle
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Bicycle", Bicycle.class, DefaultBicycle.class);
    }

    /**
     * Creates an instance of type Bicycle.  Modifies the underlying ontology.
     */
    public Bicycle createBicycle(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BICYCLE, DefaultBicycle.class);
    }

    /**
     * Gets an instance of type Bicycle with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bicycle getBicycle(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BICYCLE, DefaultBicycle.class);
    }

    /**
     * Gets all instances of Bicycle from the ontology.
     */
    public Collection<? extends Bicycle> getAllBicycleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BICYCLE, DefaultBicycle.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Cement
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Cement", Cement.class, DefaultCement.class);
    }

    /**
     * Creates an instance of type Cement.  Modifies the underlying ontology.
     */
    public Cement createCement(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CEMENT, DefaultCement.class);
    }

    /**
     * Gets an instance of type Cement with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Cement getCement(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CEMENT, DefaultCement.class);
    }

    /**
     * Gets all instances of Cement from the ontology.
     */
    public Collection<? extends Cement> getAllCementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CEMENT, DefaultCement.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Clay
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Clay", Clay.class, DefaultClay.class);
    }

    /**
     * Creates an instance of type Clay.  Modifies the underlying ontology.
     */
    public Clay createClay(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CLAY, DefaultClay.class);
    }

    /**
     * Gets an instance of type Clay with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Clay getClay(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CLAY, DefaultClay.class);
    }

    /**
     * Gets all instances of Clay from the ontology.
     */
    public Collection<? extends Clay> getAllClayInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CLAY, DefaultClay.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Equipament
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Equipament", Equipament.class, DefaultEquipament.class);
    }

    /**
     * Creates an instance of type Equipament.  Modifies the underlying ontology.
     */
    public Equipament createEquipament(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EQUIPAMENT, DefaultEquipament.class);
    }

    /**
     * Gets an instance of type Equipament with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Equipament getEquipament(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EQUIPAMENT, DefaultEquipament.class);
    }

    /**
     * Gets all instances of Equipament from the ontology.
     */
    public Collection<? extends Equipament> getAllEquipamentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EQUIPAMENT, DefaultEquipament.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Grass
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Grass", Grass.class, DefaultGrass.class);
    }

    /**
     * Creates an instance of type Grass.  Modifies the underlying ontology.
     */
    public Grass createGrass(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GRASS, DefaultGrass.class);
    }

    /**
     * Gets an instance of type Grass with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Grass getGrass(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GRASS, DefaultGrass.class);
    }

    /**
     * Gets all instances of Grass from the ontology.
     */
    public Collection<? extends Grass> getAllGrassInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GRASS, DefaultGrass.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Ground
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Ground", Ground.class, DefaultGround.class);
    }

    /**
     * Creates an instance of type Ground.  Modifies the underlying ontology.
     */
    public Ground createGround(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GROUND, DefaultGround.class);
    }

    /**
     * Gets an instance of type Ground with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Ground getGround(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GROUND, DefaultGround.class);
    }

    /**
     * Gets all instances of Ground from the ontology.
     */
    public Collection<? extends Ground> getAllGroundInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GROUND, DefaultGround.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Player
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Player", Player.class, DefaultPlayer.class);
    }

    /**
     * Creates an instance of type Player.  Modifies the underlying ontology.
     */
    public Player createPlayer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PLAYER, DefaultPlayer.class);
    }

    /**
     * Gets an instance of type Player with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Player getPlayer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PLAYER, DefaultPlayer.class);
    }

    /**
     * Gets all instances of Player from the ontology.
     */
    public Collection<? extends Player> getAllPlayerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PLAYER, DefaultPlayer.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Raquet
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Raquet", Raquet.class, DefaultRaquet.class);
    }

    /**
     * Creates an instance of type Raquet.  Modifies the underlying ontology.
     */
    public Raquet createRaquet(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RAQUET, DefaultRaquet.class);
    }

    /**
     * Gets an instance of type Raquet with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Raquet getRaquet(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RAQUET, DefaultRaquet.class);
    }

    /**
     * Gets all instances of Raquet from the ontology.
     */
    public Collection<? extends Raquet> getAllRaquetInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RAQUET, DefaultRaquet.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Sport
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Sport", Sport.class, DefaultSport.class);
    }

    /**
     * Creates an instance of type Sport.  Modifies the underlying ontology.
     */
    public Sport createSport(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPORT, DefaultSport.class);
    }

    /**
     * Gets an instance of type Sport with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Sport getSport(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPORT, DefaultSport.class);
    }

    /**
     * Gets all instances of Sport from the ontology.
     */
    public Collection<? extends Sport> getAllSportInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPORT, DefaultSport.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/pizza/pizza.owl#Water
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/pizza/pizza.owl#Water", Water.class, DefaultWater.class);
    }

    /**
     * Creates an instance of type Water.  Modifies the underlying ontology.
     */
    public Water createWater(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WATER, DefaultWater.class);
    }

    /**
     * Gets an instance of type Water with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Water getWater(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WATER, DefaultWater.class);
    }

    /**
     * Gets all instances of Water from the ontology.
     */
    public Collection<? extends Water> getAllWaterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WATER, DefaultWater.class);
    }


    /* ***************************************************
     * Class urn:absolute:sport-ontology#Trunks
     */

    {
        javaMapping.add("urn:absolute:sport-ontology#Trunks", Trunks.class, DefaultTrunks.class);
    }

    /**
     * Creates an instance of type Trunks.  Modifies the underlying ontology.
     */
    public Trunks createTrunks(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRUNKS, DefaultTrunks.class);
    }

    /**
     * Gets an instance of type Trunks with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Trunks getTrunks(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRUNKS, DefaultTrunks.class);
    }

    /**
     * Gets all instances of Trunks from the ontology.
     */
    public Collection<? extends Trunks> getAllTrunksInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRUNKS, DefaultTrunks.class);
    }


}
