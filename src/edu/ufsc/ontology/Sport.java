package edu.ufsc.ontology;

import java.net.URI;
import java.util.Collection;
import javax.xml.datatype.XMLGregorianCalendar;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: Sport <br>
 * @version generated on Sat May 06 13:13:06 BRT 2017 by tonussi
 */

public interface Sport extends WrappedIndividual {

    /* ***************************************************
     * Property http://www.co-ode.org/ontologies/pizza/pizza.owl#hasEquipament
     */
     
    /**
     * Gets all property values for the hasEquipament property.<p>
     * 
     * @returns a collection of values for the hasEquipament property.
     */
    Collection<? extends Equipament> getHasEquipament();

    /**
     * Checks if the class has a hasEquipament property value.<p>
     * 
     * @return true if there is a hasEquipament property value.
     */
    boolean hasHasEquipament();

    /**
     * Adds a hasEquipament property value.<p>
     * 
     * @param newHasEquipament the hasEquipament property value to be added
     */
    void addHasEquipament(Equipament newHasEquipament);

    /**
     * Removes a hasEquipament property value.<p>
     * 
     * @param oldHasEquipament the hasEquipament property value to be removed.
     */
    void removeHasEquipament(Equipament oldHasEquipament);


    /* ***************************************************
     * Property http://www.co-ode.org/ontologies/pizza/pizza.owl#hasFamous
     */
     
    /**
     * Gets all property values for the hasFamous property.<p>
     * 
     * @returns a collection of values for the hasFamous property.
     */
    Collection<? extends Famous> getHasFamous();

    /**
     * Checks if the class has a hasFamous property value.<p>
     * 
     * @return true if there is a hasFamous property value.
     */
    boolean hasHasFamous();

    /**
     * Adds a hasFamous property value.<p>
     * 
     * @param newHasFamous the hasFamous property value to be added
     */
    void addHasFamous(Famous newHasFamous);

    /**
     * Removes a hasFamous property value.<p>
     * 
     * @param oldHasFamous the hasFamous property value to be removed.
     */
    void removeHasFamous(Famous oldHasFamous);


    /* ***************************************************
     * Property http://www.co-ode.org/ontologies/pizza/pizza.owl#isPlayedBy
     */
     
    /**
     * Gets all property values for the isPlayedBy property.<p>
     * 
     * @returns a collection of values for the isPlayedBy property.
     */
    Collection<? extends Player> getIsPlayedBy();

    /**
     * Checks if the class has a isPlayedBy property value.<p>
     * 
     * @return true if there is a isPlayedBy property value.
     */
    boolean hasIsPlayedBy();

    /**
     * Adds a isPlayedBy property value.<p>
     * 
     * @param newIsPlayedBy the isPlayedBy property value to be added
     */
    void addIsPlayedBy(Player newIsPlayedBy);

    /**
     * Removes a isPlayedBy property value.<p>
     * 
     * @param oldIsPlayedBy the isPlayedBy property value to be removed.
     */
    void removeIsPlayedBy(Player oldIsPlayedBy);


    /* ***************************************************
     * Property http://www.co-ode.org/ontologies/pizza/pizza.owl#isPlayerOf
     */
     
    /**
     * Gets all property values for the isPlayerOf property.<p>
     * 
     * @returns a collection of values for the isPlayerOf property.
     */
    Collection<? extends Player> getIsPlayerOf();

    /**
     * Checks if the class has a isPlayerOf property value.<p>
     * 
     * @return true if there is a isPlayerOf property value.
     */
    boolean hasIsPlayerOf();

    /**
     * Adds a isPlayerOf property value.<p>
     * 
     * @param newIsPlayerOf the isPlayerOf property value to be added
     */
    void addIsPlayerOf(Player newIsPlayerOf);

    /**
     * Removes a isPlayerOf property value.<p>
     * 
     * @param oldIsPlayerOf the isPlayerOf property value to be removed.
     */
    void removeIsPlayerOf(Player oldIsPlayerOf);


    /* ***************************************************
     * Property urn:absolute:sport-ontology#isNotPlayedIn
     */
     
    /**
     * Gets all property values for the isNotPlayedIn property.<p>
     * 
     * @returns a collection of values for the isNotPlayedIn property.
     */
    Collection<? extends Ground> getIsNotPlayedIn();

    /**
     * Checks if the class has a isNotPlayedIn property value.<p>
     * 
     * @return true if there is a isNotPlayedIn property value.
     */
    boolean hasIsNotPlayedIn();

    /**
     * Adds a isNotPlayedIn property value.<p>
     * 
     * @param newIsNotPlayedIn the isNotPlayedIn property value to be added
     */
    void addIsNotPlayedIn(Ground newIsNotPlayedIn);

    /**
     * Removes a isNotPlayedIn property value.<p>
     * 
     * @param oldIsNotPlayedIn the isNotPlayedIn property value to be removed.
     */
    void removeIsNotPlayedIn(Ground oldIsNotPlayedIn);


    /* ***************************************************
     * Property urn:absolute:sport-ontology#isPlayedIn
     */
     
    /**
     * Gets all property values for the isPlayedIn property.<p>
     * 
     * @returns a collection of values for the isPlayedIn property.
     */
    Collection<? extends Ground> getIsPlayedIn();

    /**
     * Checks if the class has a isPlayedIn property value.<p>
     * 
     * @return true if there is a isPlayedIn property value.
     */
    boolean hasIsPlayedIn();

    /**
     * Adds a isPlayedIn property value.<p>
     * 
     * @param newIsPlayedIn the isPlayedIn property value to be added
     */
    void addIsPlayedIn(Ground newIsPlayedIn);

    /**
     * Removes a isPlayedIn property value.<p>
     * 
     * @param oldIsPlayedIn the isPlayedIn property value to be removed.
     */
    void removeIsPlayedIn(Ground oldIsPlayedIn);


    /* ***************************************************
     * Property urn:absolute:sport-ontology#notHasEquipament
     */
     
    /**
     * Gets all property values for the notHasEquipament property.<p>
     * 
     * @returns a collection of values for the notHasEquipament property.
     */
    Collection<? extends Equipament> getNotHasEquipament();

    /**
     * Checks if the class has a notHasEquipament property value.<p>
     * 
     * @return true if there is a notHasEquipament property value.
     */
    boolean hasNotHasEquipament();

    /**
     * Adds a notHasEquipament property value.<p>
     * 
     * @param newNotHasEquipament the notHasEquipament property value to be added
     */
    void addNotHasEquipament(Equipament newNotHasEquipament);

    /**
     * Removes a notHasEquipament property value.<p>
     * 
     * @param oldNotHasEquipament the notHasEquipament property value to be removed.
     */
    void removeNotHasEquipament(Equipament oldNotHasEquipament);


    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
